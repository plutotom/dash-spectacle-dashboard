{"version":3,"file":"HaDashboardLayout-CyRxgd75.js","sources":["../../../resources/js/Components/ImageBackgroundComponentGooglePhotos.tsx","../../../resources/js/Layouts/HaDashboardLayout.tsx"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { PropsWithChildren, useEffect, useState } from 'react';\n\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\ninterface RandomPhotoResponse extends AxiosResponse {\n    data: {\n        success: boolean;\n        url: string;\n        media_metadata_width: number;\n    };\n}\n\nconst DEFAULT_BACKGROUND_IMAGE = 'https://ucarecdn.com/05f649bf-b70b-4cf8-90f7-2588ce404a08/';\n\n/**\n * ImageBackgroundComponent is a React component that displays a random background image from a predefined list.\n * It changes the background image every 10 minutes.\n *\n * @param {PropsWithChildren} props - The component props.\n * @returns {JSX.Element} The component JSX.\n */\nexport default function ImageBackgroundComponentGooglePhotos({ children }: PropsWithChildren) {\n    const [currentBackground, setCurrentBackground] = useState<string | null>(null);\n    const [error, setError] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const ignoreDevelopmentPhoto = false;\n\n    const fetchRandomPhoto = async () => {\n        try {\n            if (isDevelopment && ignoreDevelopmentPhoto) {\n                console.log('Using default image due to being in development mode');\n                setCurrentBackground(DEFAULT_BACKGROUND_IMAGE);\n                setError(false);\n                return;\n            }\n\n            setError(false);\n\n            // Try Google Photos first\n            try {\n                const response: RandomPhotoResponse = await axios.get('/api/random-photo-from-dashboard-album');\n                if (response.status === 200 && response.data.success) {\n                    setCurrentBackground(response.data.url);\n                    setError(false);\n                    setErrorMessage(null);\n                    return;\n                }\n            } catch (googleErr) {\n                console.log('Google Photos fetch failed, trying local photos...');\n            }\n\n            // If Google Photos fails, try local photos\n            try {\n                const localResponse: RandomPhotoResponse = await axios.get('/api/random-photo-local');\n                if (localResponse.status === 200 && localResponse.data.success) {\n                    console.log('Local photos fetch successful');\n                    console.log(localResponse.data);\n                    setCurrentBackground(localResponse.data.url);\n                    setError(false);\n                    setErrorMessage(null);\n                    return;\n                }\n            } catch (localErr) {\n                console.error('Local photos fetch failed:', localErr);\n            }\n\n            // If both fail, use default\n            setCurrentBackground(DEFAULT_BACKGROUND_IMAGE);\n            console.log('Failed to fetch photos from both Google Photos and local storage, using default background');\n            setError(true);\n            setErrorMessage('Failed to fetch photos from both Google Photos and local storage');\n        } catch (err) {\n            console.error('Failed to fetch photo:', err);\n            setError(true);\n            setErrorMessage(err instanceof Error ? err.message : 'Unknown error');\n            setCurrentBackground(DEFAULT_BACKGROUND_IMAGE);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchRandomPhoto();\n        const interval = setInterval(fetchRandomPhoto, 1000 * 60 * 10); // 10 minutes\n\n        return () => clearInterval(interval);\n    }, []);\n\n    if (isLoading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div>\n            <div\n                id=\"background-image-container\"\n                className=\"min-h-screen bg-gray-900\"\n                style={{\n                    backgroundImage: `url(${new URL(currentBackground).href})`,\n                    // backgroundImage: `url(${currentBackground})`,\n                    // backgroundImage: `url(${DEFAULT_BACKGROUND_IMAGE})`,\n                    backgroundSize: 'cover',\n                    backgroundPosition: 'center',\n                    backgroundRepeat: 'no-repeat',\n                    transition: 'background-image 1s ease-in-out',\n                }}\n            >\n                {/* {error && <div className=\"text-muted-foreground\">{errorMessage}</div>} */}\n                <BackgroundGradient>{children}</BackgroundGradient>\n            </div>\n        </div>\n    );\n}\n\nfunction BackgroundGradient({ children }: PropsWithChildren) {\n    return (\n        <div\n            className=\"\"\n            style={{\n                background: `\n        linear-gradient(to bottom,\n            rgba(0, 0, 0, 0.2) 50%,\n            rgba(0, 0, 0, 0) 20%,\n            rgba(0, 0, 0, 0) 30%,\n            rgba(0, 0, 0, .2) 50%\n        )\n    `,\n            }}\n        >\n            {children}\n        </div>\n    );\n}\n","import ImageBackgroundComponentGooglePhotos from '@/Components/ImageBackgroundComponentGooglePhotos';\nimport { PropsWithChildren, ReactNode } from 'react';\nfunction HaDashboardLayout({ children }: PropsWithChildren<{ header?: ReactNode }>) {\n    return (\n        <>\n            {/* <ImageBackgroundComponent> */}\n            <ImageBackgroundComponentGooglePhotos>\n                <div className=\"relative\">\n                    <main>{children}</main>\n                </div>\n            </ImageBackgroundComponentGooglePhotos>\n            {/* </ImageBackgroundComponent> */}\n        </>\n    );\n}\n\nexport default HaDashboardLayout;\n"],"names":["isDevelopment","DEFAULT_BACKGROUND_IMAGE","ImageBackgroundComponentGooglePhotos","children","currentBackground","setCurrentBackground","useState","error","setError","errorMessage","setErrorMessage","isLoading","setIsLoading","ignoreDevelopmentPhoto","fetchRandomPhoto","response","axios","localResponse","localErr","err","useEffect","interval","jsx","BackgroundGradient","HaDashboardLayout","Fragment"],"mappings":"+CAGA,MAAMA,EAAgB,GAUhBC,EAA2B,6DAST,SAAAC,EAAqC,CAAE,SAAAC,GAA+B,CAC1F,KAAM,CAACC,EAAmBC,CAAoB,EAAIC,EAAAA,SAAwB,IAAI,EACxE,CAACC,EAAOC,CAAQ,EAAIF,EAAAA,SAAkB,EAAK,EAC3C,CAACG,EAAcC,CAAe,EAAIJ,EAAAA,SAAwB,IAAI,EAC9D,CAACK,EAAWC,CAAY,EAAIN,EAAAA,SAAkB,EAAI,EAClDO,EAAyB,GAEzBC,EAAmB,SAAY,CAC7B,GAAA,CAQAN,EAAS,EAAK,EAGV,GAAA,CACA,MAAMO,EAAgC,MAAMC,EAAM,IAAI,wCAAwC,EAC9F,GAAID,EAAS,SAAW,KAAOA,EAAS,KAAK,QAAS,CAC7BV,EAAAU,EAAS,KAAK,GAAG,EACtCP,EAAS,EAAK,EACdE,EAAgB,IAAI,EACpB,MAAA,OAEY,CAChB,QAAQ,IAAI,oDAAoD,CAAA,CAIhE,GAAA,CACA,MAAMO,EAAqC,MAAMD,EAAM,IAAI,yBAAyB,EACpF,GAAIC,EAAc,SAAW,KAAOA,EAAc,KAAK,QAAS,CAC5D,QAAQ,IAAI,+BAA+B,EACnC,QAAA,IAAIA,EAAc,IAAI,EACTZ,EAAAY,EAAc,KAAK,GAAG,EAC3CT,EAAS,EAAK,EACdE,EAAgB,IAAI,EACpB,MAAA,QAECQ,EAAU,CACP,QAAA,MAAM,6BAA8BA,CAAQ,CAAA,CAIxDb,EAAqBJ,CAAwB,EAC7C,QAAQ,IAAI,4FAA4F,EACxGO,EAAS,EAAI,EACbE,EAAgB,kEAAkE,QAC7ES,EAAK,CACF,QAAA,MAAM,yBAA0BA,CAAG,EAC3CX,EAAS,EAAI,EACbE,EAAgBS,aAAe,MAAQA,EAAI,QAAU,eAAe,EACpEd,EAAqBJ,CAAwB,CAAA,QAC/C,CACEW,EAAa,EAAK,CAAA,CAE1B,EASA,OAPAQ,EAAAA,UAAU,IAAM,CACKN,EAAA,EACjB,MAAMO,EAAW,YAAYP,EAAkB,IAAO,GAAK,EAAE,EAEtD,MAAA,IAAM,cAAcO,CAAQ,CACvC,EAAG,EAAE,EAEDV,EACQW,EAAA,IAAA,OAAI,SAAU,aAAA,QAIrB,MACG,CAAA,SAAAA,EAAA,IAAC,MAAA,CACG,GAAG,6BACH,UAAU,2BACV,MAAO,CACH,gBAAiB,OAAO,IAAI,IAAIlB,CAAiB,EAAE,IAAI,IAGvD,eAAgB,QAChB,mBAAoB,SACpB,iBAAkB,YAClB,WAAY,iCAChB,EAGA,SAAAkB,EAAA,IAACC,GAAoB,SAAApB,CAAS,CAAA,CAAA,CAAA,EAEtC,CAER,CAEA,SAASoB,EAAmB,CAAE,SAAApB,GAA+B,CAErD,OAAAmB,EAAA,IAAC,MAAA,CACG,UAAU,GACV,MAAO,CACH,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQhB,EAEC,SAAAnB,CAAA,CACL,CAER,CCpIA,SAASqB,EAAkB,CAAE,SAAArB,GAAuD,CAChF,OAGQmB,EAAA,IAAAG,EAAA,SAAA,CAAA,SAAAH,EAAA,IAACpB,EACG,CAAA,SAAAoB,EAAAA,IAAC,MAAI,CAAA,UAAU,WACX,SAAAA,EAAAA,IAAC,OAAM,CAAA,SAAAnB,EAAS,CACpB,CAAA,CACJ,CAAA,EAEJ,CAER"}