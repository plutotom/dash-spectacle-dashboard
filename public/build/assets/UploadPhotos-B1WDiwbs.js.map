{"version":3,"file":"UploadPhotos-B1WDiwbs.js","sources":["../../../resources/js/Pages/GooglePhotos/UploadPhotos.tsx"],"sourcesContent":["import { router } from '@inertiajs/react';\nimport React, { useState } from 'react';\n\ninterface Album {\n    id: string;\n    title: string;\n    productUrl: string;\n    mediaItemsCount: number;\n    coverPhotoUrl: string;\n}\n\ninterface UploadPhotosProps {\n    albums: Album[];\n    errors?: Record<string, string>;\n    success?: string;\n}\n\ninterface InertiaProgressEvent {\n    percentage: number;\n}\n\nconst UploadPhotos: React.FC<UploadPhotosProps> = ({ albums, errors, success }) => {\n    console.log(albums);\n    console.log(errors);\n    console.log(success);\n    const [albumId, setAlbumId] = useState(albums[0]?.id || '');\n    const [files, setFiles] = useState<FileList | null>(null);\n    const [progress, setProgress] = useState<number | null>(null);\n    const [results, setResults] = useState<unknown>(null);\n    const [uploadType, setUploadType] = useState<'google' | 'local'>('google');\n\n    // Album creation state\n    const [newAlbumName, setNewAlbumName] = useState('');\n    const [albumError, setAlbumError] = useState<string | null>(null);\n    const [albumSuccess, setAlbumSuccess] = useState<string | null>(null);\n\n    const handleCreateAlbum = (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!newAlbumName.trim()) {\n            setAlbumError('Album name is required');\n            return;\n        }\n        setAlbumError(null);\n        router.post(\n            '/api/create-album',\n            { name: newAlbumName },\n            {\n                onSuccess: () => {\n                    setNewAlbumName('');\n                    setAlbumSuccess('Album created! Reloading...');\n                    setTimeout(() => window.location.reload(), 1000);\n                },\n                onError: (errors) => {\n                    setAlbumError(errors?.name || 'Failed to create album');\n                },\n            }\n        );\n    };\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!files) {\n            return;\n        }\n\n        const data = {\n            ...(uploadType === 'google' && { albumId }),\n            photos: Array.from(files),\n        };\n\n        const endpoint = uploadType === 'google' ? '/api/upload-photos' : '/api/upload-photos-local';\n\n        router.post(endpoint, data, {\n            forceFormData: true,\n            onProgress: (event: InertiaProgressEvent) => {\n                setProgress(event.percentage);\n            },\n            onSuccess: (page: unknown) => {\n                setResults((page as { props: { results: unknown } }).props.results);\n                setProgress(null);\n            },\n            onError: () => {\n                setProgress(null);\n            },\n        });\n    };\n\n    return (\n        <div className=\"mx-auto max-w-2xl space-y-8 p-6\">\n            {/* Album creation form */}\n            <form onSubmit={handleCreateAlbum} className=\"mb-8 rounded-lg border border-gray-200 bg-white p-4 shadow-sm\">\n                <h2 className=\"mb-2 text-lg font-semibold text-gray-800\">Create a New Album</h2>\n                <div className=\"flex items-center space-x-2\">\n                    <input\n                        type=\"text\"\n                        value={newAlbumName}\n                        onChange={(e) => setNewAlbumName(e.target.value)}\n                        placeholder=\"Album name\"\n                        className=\"flex-1 rounded-md border border-gray-300 p-2 focus:border-blue-500 focus:ring-blue-500\"\n                    />\n                    <button\n                        type=\"submit\"\n                        className=\"rounded-md bg-green-600 px-4 py-2 text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2\"\n                    >\n                        Create Album\n                    </button>\n                </div>\n                {albumError && <div className=\"mt-2 text-sm text-red-600\">{albumError}</div>}\n                {albumSuccess && <div className=\"mt-2 text-sm text-green-600\">{albumSuccess}</div>}\n                {errors?.album_error && <div className=\"mt-2 text-sm text-red-600\">{errors.album_error}</div>}\n                {success && <div className=\"mt-2 text-sm text-green-600\">{success}</div>}\n            </form>\n\n            {/* Upload form */}\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {errors &&\n                    Object.values(errors).map((error) => (\n                        <div key={error} className=\"mb-4 rounded-lg bg-red-100 p-4 text-red-700\">\n                            {error}\n                        </div>\n                    ))}\n                {success && <div className=\"mb-4 rounded-lg bg-green-100 p-4 text-green-700\">{success}</div>}\n                <h1 className=\"mb-6 text-2xl font-bold text-gray-800\">Upload Photos</h1>\n\n                {/* Upload type selector */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-medium text-gray-700\">Upload Type:</label>\n                    <div className=\"flex space-x-4\">\n                        <label className=\"inline-flex items-center\">\n                            <input\n                                type=\"radio\"\n                                value=\"google\"\n                                checked={uploadType === 'google'}\n                                onChange={(e) => setUploadType(e.target.value as 'google')}\n                                className=\"form-radio h-4 w-4 text-blue-600\"\n                            />\n                            <span className=\"ml-2\">Google Photos</span>\n                        </label>\n                        <label className=\"inline-flex items-center\">\n                            <input\n                                type=\"radio\"\n                                value=\"local\"\n                                checked={uploadType === 'local'}\n                                onChange={(e) => setUploadType(e.target.value as 'local')}\n                                className=\"form-radio h-4 w-4 text-blue-600\"\n                            />\n                            <span className=\"ml-2\">Local Storage</span>\n                        </label>\n                    </div>\n                </div>\n\n                {/* Album selector - only show for Google Photos */}\n                {uploadType === 'google' && (\n                    <div className=\"space-y-2\">\n                        <label htmlFor=\"album-select\" className=\"block text-sm font-medium text-gray-700\">\n                            Select Album:\n                        </label>\n                        <select\n                            id=\"album-select\"\n                            name=\"album\"\n                            value={albumId}\n                            onChange={(e) => setAlbumId(e.target.value)}\n                            className=\"w-full rounded-md border border-gray-300 p-2 focus:border-blue-500 focus:ring-blue-500\"\n                        >\n                            {albums.map((album) => (\n                                <option key={album.id} value={album.id}>\n                                    {album.title} ({album.mediaItemsCount || 0} items)\n                                </option>\n                            ))}\n                        </select>\n                    </div>\n                )}\n\n                <div className=\"space-y-2\">\n                    <label htmlFor=\"file-input\" className=\"block text-sm font-medium text-gray-700\">\n                        Select Photos:\n                    </label>\n                    <input\n                        id=\"file-input\"\n                        type=\"file\"\n                        multiple\n                        accept=\"image/*\"\n                        onChange={(e) => setFiles(e.target.files)}\n                        className=\"w-full rounded-md border border-gray-300 p-2 focus:border-blue-500 focus:ring-blue-500\"\n                    />\n                </div>\n\n                <button\n                    type=\"submit\"\n                    className=\"w-full rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n                >\n                    Upload to {uploadType === 'google' ? 'Google Photos' : 'Local Storage'}\n                </button>\n\n                {progress !== null && (\n                    <div className=\"space-y-2\">\n                        <progress value={progress} max={100} className=\"h-2 w-full rounded-full bg-gray-200\">\n                            {progress}%\n                        </progress>\n                        <span className=\"text-sm text-gray-600\">{progress}%</span>\n                    </div>\n                )}\n\n                {results && (\n                    <div className=\"mt-6 rounded-lg bg-gray-50 p-4\">\n                        <h3 className=\"mb-2 text-lg font-medium text-gray-800\">Upload Results</h3>\n                        <pre className=\"overflow-x-auto text-sm text-gray-600\">{JSON.stringify(results, null, 2)}</pre>\n                    </div>\n                )}\n            </form>\n        </div>\n    );\n};\n\nexport default UploadPhotos;\n"],"names":["UploadPhotos","albums","errors","success","albumId","setAlbumId","useState","_a","files","setFiles","progress","setProgress","results","setResults","uploadType","setUploadType","newAlbumName","setNewAlbumName","albumError","setAlbumError","albumSuccess","setAlbumSuccess","handleCreateAlbum","e","router","handleSubmit","data","endpoint","event","page","jsxs","jsx","error","album"],"mappings":"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"}