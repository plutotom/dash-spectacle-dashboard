{"version":3,"file":"HaDashboardLayout-Bh_ar8bf.js","sources":["../../../resources/js/Components/ImageBackgroundComponentGooglePhotos.tsx","../../../resources/js/Layouts/HaDashboardLayout.tsx"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { PropsWithChildren, useState } from 'react';\n\nimport { useEffect } from 'react';\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\ninterface RandomPhotoResponse extends AxiosResponse {\n    data: {\n        success: boolean;\n        url: string;\n        media_metadata_width: number;\n    };\n}\n\nconst DEFAULT_BACKGROUND_IMAGE = 'https://ucarecdn.com/05f649bf-b70b-4cf8-90f7-2588ce404a08/';\n\n/**\n * ImageBackgroundComponent is a React component that displays a random background image from a predefined list.\n * It changes the background image every 10 minutes.\n *\n * @param {PropsWithChildren} props - The component props.\n * @returns {JSX.Element} The component JSX.\n */\nexport default function ImageBackgroundComponentGooglePhotos({ children }: PropsWithChildren) {\n    const [currentBackground, setCurrentBackground] = useState<string | null>(null);\n    const [error, setError] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n\n    const fetchRandomPhoto = async () => {\n        try {\n            // returns {success: true, url: string}\n            if (isDevelopment) {\n                setCurrentBackground(DEFAULT_BACKGROUND_IMAGE);\n                setError(false);\n                return;\n            }\n            setError(false);\n            const response: RandomPhotoResponse = await axios.get('/api/random-photo-from-dashboard-album');\n            if (response.status === 200) {\n                setCurrentBackground(response.data.url);\n                setError(false);\n                setErrorMessage(null);\n            }\n        } catch (err) {\n            console.error('Failed to fetch photo:', err);\n            setError(true);\n            setErrorMessage(err instanceof Error ? err.message : 'Unknown error');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchRandomPhoto();\n        const interval = setInterval(fetchRandomPhoto, 1000 * 60 * 10); // 10 minutes\n\n        return () => clearInterval(interval);\n    }, []);\n\n    if (isLoading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div>\n            <div\n                className=\"min-h-screen bg-gray-900\"\n                style={{\n                    backgroundImage: `url(${currentBackground})`,\n                    backgroundSize: 'cover',\n                    backgroundPosition: 'center',\n                    backgroundRepeat: 'no-repeat',\n                    transition: 'background-image 1s ease-in-out',\n                }}\n            >\n                {/* {error && <div className=\"text-muted-foreground\">{errorMessage}</div>} */}\n                <BackgroundGradient>{children}</BackgroundGradient>\n            </div>\n        </div>\n    );\n}\n\nfunction BackgroundGradient({ children }: PropsWithChildren) {\n    return (\n        <div\n            className=\"\"\n            style={{\n                background: `\n        linear-gradient(to bottom,\n            rgba(0, 0, 0, 0.2) 50%,\n            rgba(0, 0, 0, 0) 20%,\n            rgba(0, 0, 0, 0) 30%,\n            rgba(0, 0, 0, .2) 50%\n        )\n    `,\n            }}\n        >\n            {children}\n        </div>\n    );\n}\n","import ImageBackgroundComponentGooglePhotos from '@/Components/ImageBackgroundComponentGooglePhotos';\nimport { PropsWithChildren, ReactNode } from 'react';\nfunction HaDashboardLayout({ children }: PropsWithChildren<{ header?: ReactNode }>) {\n    return (\n        <>\n            {/* <ImageBackgroundComponent> */}\n            <ImageBackgroundComponentGooglePhotos>\n                <div className=\"relative\">\n                    <main>{children}</main>\n                </div>\n            </ImageBackgroundComponentGooglePhotos>\n            {/* </ImageBackgroundComponent> */}\n        </>\n    );\n}\n\nexport default HaDashboardLayout;\n"],"names":["isDevelopment","ImageBackgroundComponentGooglePhotos","children","currentBackground","setCurrentBackground","useState","error","setError","errorMessage","setErrorMessage","isLoading","setIsLoading","fetchRandomPhoto","response","axios","err","useEffect","interval","jsx","BackgroundGradient","HaDashboardLayout","Fragment"],"mappings":"oDAIA,MAAMA,EAAgB,GAmBE,SAAAC,EAAqC,CAAE,SAAAC,GAA+B,CAC1F,KAAM,CAACC,EAAmBC,CAAoB,EAAIC,EAAAA,SAAwB,IAAI,EACxE,CAACC,EAAOC,CAAQ,EAAIF,EAAAA,SAAkB,EAAK,EAC3C,CAACG,EAAcC,CAAe,EAAIJ,EAAAA,SAAwB,IAAI,EAC9D,CAACK,EAAWC,CAAY,EAAIN,EAAAA,SAAkB,EAAI,EAElDO,EAAmB,SAAY,CAC7B,GAAA,CAOAL,EAAS,EAAK,EACd,MAAMM,EAAgC,MAAMC,EAAM,IAAI,wCAAwC,EAC1FD,EAAS,SAAW,MACCT,EAAAS,EAAS,KAAK,GAAG,EACtCN,EAAS,EAAK,EACdE,EAAgB,IAAI,SAEnBM,EAAK,CACF,QAAA,MAAM,yBAA0BA,CAAG,EAC3CR,EAAS,EAAI,EACbE,EAAgBM,aAAe,MAAQA,EAAI,QAAU,eAAe,CAAA,QACtE,CACEJ,EAAa,EAAK,CAAA,CAE1B,EASA,OAPAK,EAAAA,UAAU,IAAM,CACKJ,EAAA,EACjB,MAAMK,EAAW,YAAYL,EAAkB,IAAO,GAAK,EAAE,EAEtD,MAAA,IAAM,cAAcK,CAAQ,CACvC,EAAG,EAAE,EAEDP,EACQQ,EAAA,IAAA,OAAI,SAAU,aAAA,QAIrB,MACG,CAAA,SAAAA,EAAA,IAAC,MAAA,CACG,UAAU,2BACV,MAAO,CACH,gBAAiB,OAAOf,CAAiB,IACzC,eAAgB,QAChB,mBAAoB,SACpB,iBAAkB,YAClB,WAAY,iCAChB,EAGA,SAAAe,EAAA,IAACC,GAAoB,SAAAjB,CAAS,CAAA,CAAA,CAAA,EAEtC,CAER,CAEA,SAASiB,EAAmB,CAAE,SAAAjB,GAA+B,CAErD,OAAAgB,EAAA,IAAC,MAAA,CACG,UAAU,GACV,MAAO,CACH,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQhB,EAEC,SAAAhB,CAAA,CACL,CAER,CCnGA,SAASkB,EAAkB,CAAE,SAAAlB,GAAuD,CAChF,OAGQgB,EAAA,IAAAG,EAAA,SAAA,CAAA,SAAAH,EAAA,IAACjB,EACG,CAAA,SAAAiB,EAAAA,IAAC,MAAI,CAAA,UAAU,WACX,SAAAA,EAAAA,IAAC,OAAM,CAAA,SAAAhB,EAAS,CACpB,CAAA,CACJ,CAAA,EAEJ,CAER"}